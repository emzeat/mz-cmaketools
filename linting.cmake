#
# autoformat.cmake
#
# Copyright (c) 2013-2018 Marius Zwicker
# All rights reserved.
#
# @LICENSE_HEADER_START@
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# @LICENSE_HEADER_END@
#

##################################################
#
# BUILD/LINTING.CMAKE
#
#   Provides an easy mean to lint and format a file using
#   clang-tidy, clang-format and clazy
#
#   Expects the following variables to be populated in order
#   to pick up the paths of the tools:
#     CLAZY, CLANG_FORMAT, CLANG_TIDY
#
#
# PROVIDED MACROS
# -----------------------
# mz_auto_format <target> [<file1> <file2>]...
#   Format and lint the sourcefiles whenever the given target is built.
#   When no explicit sourcefiles are given, all sources the target
#   depends on and ending with (cxx|hpp|cpp|c) will be automatically
#   marked for autoformat
#
########################################################################


########################################################################
## no need to change anything beyond here
########################################################################

if( CLANG_TIDY )
    option(MZ_DO_CPPLINT "Enable to run clang-tidy on configured targets" ON)
    set(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE BOOL "Force enabled by lintin.cmake" FORCE)
endif()
if( CLANG_FORMAT OR CLAZY )
    # default to off in release builds so that we do not alter the code anymore
    if( MZ_IS_RELEASE )
        option(MZ_DO_AUTO_FORMAT "Enable to run clang-format on configured targets" OFF)
    else()
        option(MZ_DO_AUTO_FORMAT "Enable to run clang-format on configured targets" ON)
    endif()
endif()

if( CLANG_TIDY )
  if( MZ_DO_CPPLINT )
    mz_debug_message("Linting (C++) is enabled")
  else()
    mz_warning_message("Linting (C++) is disabled, this is not recommended")
  endif()
endif()

if( CLAZY )
  if( MZ_DO_CPPLINT )
    mz_debug_message("Linting (Qt) is enabled")
  else()
    mz_warning_message("Linting (Qt) is disabled, this is not recommended")
  endif()
endif()


macro(mz_auto_format _TARGET)
  set(_sources ${ARGN})
  list(LENGTH _sources arg_count)

  if( NOT arg_count GREATER 0 )
    mz_debug_message("Autoformat was no files given, using the target's sources")
    get_target_property(_sources ${_TARGET} SOURCES)
  endif()

  # filter autogenerated files
  foreach(file ${_sources})
    get_filename_component(abs_file ${file} ABSOLUTE)
    get_filename_component(name_file ${file} NAME)
    if( NOT ${file} MATCHES "(ui_|moc_|qrc_|lemon_).+" AND NOT "${file}" MATCHES "${CMAKE_BINARY_DIR}" )

      if( ${file} MATCHES ".+\\.(cpp|cxx)$" )
        if( CLANG_TIDY AND MZ_DO_CPPLINT )
          set(lint_output ${CMAKE_CURRENT_BINARY_DIR}/tidy/${name_file}.stamp)
          add_custom_command(OUTPUT ${lint_output}
            COMMAND ${CLANG_TIDY}
              ${CLANG_TIDY_EXTRA_ARGS}
              -p ${CMAKE_BINARY_DIR}
              --quiet
              ${abs_file}
            COMMAND ${CMAKE_COMMAND} -E touch ${lint_output}
            DEPENDS ${CMAKE_SOURCE_DIR}/.clang-tidy ${abs_file}
            COMMAND_EXPAND_LISTS
            COMMENT "Linting (C++) ${name_file}"
            VERBATIM
          )
          target_sources(${_TARGET}
            PRIVATE ${lint_output}
          )
        endif()

        if( CLAZY AND MZ_DO_CPPLINT )
          set(lint_output ${CMAKE_CURRENT_BINARY_DIR}/clazy/${name_file}.stamp)
          add_custom_command(OUTPUT ${lint_output}
            COMMAND ${CLAZY}
              -p ${CMAKE_BINARY_DIR}
              #--only-qt
              --checks=level1,no-non-pod-global-static,old-style-connect,rule-of-three,assert-with-side-effects,detaching-member,inefficient-qlist,isempty-vs-count,container-inside-loop
              ${abs_file}
            COMMAND ${CMAKE_COMMAND} -E touch ${lint_output}
            DEPENDS ${abs_file}
            COMMAND_EXPAND_LISTS
            COMMENT "Linting (Qt) ${name_file}"
            VERBATIM
          )
          target_sources(${_TARGET}
            PRIVATE ${lint_output}
          )
        endif()
      endif()

      if( ${file} MATCHES ".+\\.(cpp|cxx|hpp|h|c)$" )
        set(format_output ${CMAKE_CURRENT_BINARY_DIR}/format/${name_file}.stamp)
        if( CLANG_FORMAT AND MZ_DO_AUTO_FORMAT )
          add_custom_command(OUTPUT ${format_output}
            COMMAND ${CLANG_FORMAT}
              -i
              ${abs_file}
            COMMAND ${CMAKE_COMMAND} -E touch ${format_output}
            DEPENDS ${CMAKE_SOURCE_DIR}/.clang-format ${abs_file}
            COMMAND_EXPAND_LISTS
            COMMENT "Formatting ${name_file}"
            VERBATIM
          )
          target_sources(${_TARGET}
            PRIVATE ${format_output}
          )
        endif()
      endif()

    endif()
  endforeach()
endmacro()

macro(mz_auto_format_c _TARGET)
   set(__MZ_NO_CPPLINT TRUE)
   mz_auto_format(${_TARGET} ${ARGN})
endmacro()

macro(mz_auto_format_cxx _TARGET)
   set(__MZ_NO_CPPLINT TRUE)
   mz_auto_format(${_TARGET} ${ARGN})
endmacro()
